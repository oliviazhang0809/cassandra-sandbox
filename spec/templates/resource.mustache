package com.paypal.stingray.duke.autogen.api

{{#imports}}import {{import}}
{{/imports}}
import spray.http.{StatusCodes, HttpRequest, HttpResponse, HttpMethod}
import spray.http.HttpMethods._
import com.paypal.cascade.http.resource._
import com.paypal.cascade.http.resource.HttpResourceActor.ResourceContext
import scala.concurrent.Future
import com.paypal.stingray.duke.resource.DukeAbstractResourceActorComponent

/**
 * AUTO GENERATED FILE
 *     DO NOT EDIT
 *
 * To modify the resource interface, alter the Swagger template accordingly.
 *
 * To implement the resource, extend {{className}}, IN A SEPARATE FILE. Assign
 * your implementation to the component in the usual cake way.
 *
 */
trait {{className}}Component {
// scalastyle:off whitespace.end.of.line line.size.limit
  this: DukeAbstractResourceActorComponent =>

  {{#operations}}
  {{#operation}}
  case class {{requestTypeClassName}}(
    {{#allParams}}
    {{paramName}}{{#allowMultiple}}List{{/allowMultiple}}: {{^required}}Option[{{/required}}{{#allowMultiple}}List[{{/allowMultiple}}{{dataType}}{{#allowMultiple}}]{{/allowMultiple}}{{^required}}]{{/required}}{{#hasMore}}, {{/hasMore}}
    {{/allParams}})
  {{/operation}}
  {{/operations}}
{{!comment necessary to preserve spacing}}
  val {{baseName}}ResourceActorGen: ResourceContext => {{className}}

  abstract class {{className}}(resourceContext: ResourceContext) extends DukeAbstractResourceActor(resourceContext) {
    protected val apiVersion: String = "v{{majorApiVersion}}"
    {{#operations}}
    {{#operation}}
    def {{nickname}}(request: {{requestTypeClassName}}): Unit
    {{/operation}}
    {{/operations}}
{{!comment necessary to preserve spacing}}
    override def calRootTxnName: PartialFunction[HttpMethod, String] = {
      {{#operations}}
      {{#operation}}
      case {{httpMethodUpper}} => "Duke{{capitalNickname}}"
      {{/operation}}
      {{/operations}}
{{!comment necessary to preserve spacing}}
    }
  }
// scalastyle:on whitespace.end.of.line line.size.limit
}
